// THIS FILE IS AUTOGENERATED WHEN PAGES ARE UPDATED
import React, { lazy, Suspense } from "react";
import { RouteObject } from "react-router";
import ErrorBoundary from "./components/ErrorBoundary";

// Use direct lazy imports instead of going through the index file
const AddSong = lazy(() => import('./pages/AddSong'));
const App = lazy(() => import('./pages/App'));
const CreateQueue = lazy(() => import('./pages/CreateQueue'));
const Dashboard = lazy(() => import('./pages/Dashboard'));
const ForgotPassword = lazy(() => import('./pages/ForgotPassword'));
const GuestQueueView = lazy(() => import('./pages/GuestQueueView'));
const JoinQueue = lazy(() => import('./pages/JoinQueue'));
const Login = lazy(() => import('./pages/Login'));
const Profile = lazy(() => import('./pages/Profile'));
const QueueView = lazy(() => import('./pages/QueueView'));
const ResetPassword = lazy(() => import('./pages/ResetPassword'));
const Setup = lazy(() => import('./pages/Setup'));
const Signup = lazy(() => import('./pages/Signup'));
const SignupConfirmation = lazy(() => import('./pages/SignupConfirmation'));
const SpotifyCallback = lazy(() => import('./pages/SpotifyCallback'));
const SpotifySetupPage = lazy(() => import('./pages/SpotifySetupPage'));

// Create a wrapper component with Suspense for each route
const withSuspense = (Component: React.ComponentType) => (
  <Suspense
    fallback={
      <div className="min-h-screen flex items-center justify-center bg-background text-foreground">
        <div className="text-center">
          <div className="w-12 h-12 border-t-2 border-purple-500 border-solid rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-muted-foreground">Loading...</p>
        </div>
      </div>
    }
  >
    <Component />
  </Suspense>
);

export const userRoutes: RouteObject[] = [
  { path: "/add-song", element: withSuspense(AddSong), errorElement: <ErrorBoundary /> },
  { path: "/addsong", element: withSuspense(AddSong), errorElement: <ErrorBoundary /> },
  { path: "/", element: withSuspense(App), errorElement: <ErrorBoundary /> },
  { path: "/create-queue", element: withSuspense(CreateQueue), errorElement: <ErrorBoundary /> },
  { path: "/createqueue", element: withSuspense(CreateQueue), errorElement: <ErrorBoundary /> },
  { path: "/dashboard", element: withSuspense(Dashboard), errorElement: <ErrorBoundary /> },
  { path: "/forgot-password", element: withSuspense(ForgotPassword), errorElement: <ErrorBoundary /> },
  { path: "/forgotpassword", element: withSuspense(ForgotPassword), errorElement: <ErrorBoundary /> },
  { path: "/guest-queue-view", element: withSuspense(GuestQueueView), errorElement: <ErrorBoundary /> },
  { path: "/guestqueueview", element: withSuspense(GuestQueueView), errorElement: <ErrorBoundary /> },
  { path: "/join-queue", element: withSuspense(JoinQueue), errorElement: <ErrorBoundary /> },
  { path: "/joinqueue", element: withSuspense(JoinQueue), errorElement: <ErrorBoundary /> },
  { path: "/login", element: withSuspense(Login), errorElement: <ErrorBoundary /> },
  { path: "/profile", element: withSuspense(Profile), errorElement: <ErrorBoundary /> },
  { path: "/queue/:queueId", element: withSuspense(QueueView), errorElement: <ErrorBoundary /> },
  { path: "/queue/:queueId/settings", element: withSuspense(QueueView), errorElement: <ErrorBoundary /> },
  { path: "/queue-view", element: withSuspense(QueueView), errorElement: <ErrorBoundary /> },
  { path: "/queueview", element: withSuspense(QueueView), errorElement: <ErrorBoundary /> },
  { path: "/reset-password", element: withSuspense(ResetPassword), errorElement: <ErrorBoundary /> },
  { path: "/resetpassword", element: withSuspense(ResetPassword), errorElement: <ErrorBoundary /> },
  { path: "/setup", element: withSuspense(Setup), errorElement: <ErrorBoundary /> },
  { path: "/signup", element: withSuspense(Signup), errorElement: <ErrorBoundary /> },
  { path: "/signup-confirmation", element: withSuspense(SignupConfirmation), errorElement: <ErrorBoundary /> },
  { path: "/signupconfirmation", element: withSuspense(SignupConfirmation), errorElement: <ErrorBoundary /> },
  { path: "/spotify-callback", element: withSuspense(SpotifyCallback), errorElement: <ErrorBoundary /> },
  { path: "/spotifycallback", element: withSuspense(SpotifyCallback), errorElement: <ErrorBoundary /> },
  { path: "/spotify-setup", element: withSuspense(SpotifySetupPage), errorElement: <ErrorBoundary /> },
];
