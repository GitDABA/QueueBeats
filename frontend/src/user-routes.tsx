// THIS FILE IS AUTOGENERATED WHEN PAGES ARE UPDATED
import { lazy, Suspense } from "react";
import { RouteObject } from "react-router";
import { SuspenseWrapper } from "./components/SuspenseWrapper";
import ErrorBoundary from "./components/ErrorBoundary";

// Using dynamic imports with explicit chunking names to help Vite
const AddSong = lazy(() => import('./pages/AddSong').then(module => ({ default: module.default })));
const App = lazy(() => import('./pages/App').then(module => ({ default: module.default })));
const CreateQueue = lazy(() => import('./pages/CreateQueue').then(module => ({ default: module.default })));
const Dashboard = lazy(() => import('./pages/Dashboard').then(module => ({ default: module.default })));
const ForgotPassword = lazy(() => import('./pages/ForgotPassword').then(module => ({ default: module.default })));
const GuestQueueView = lazy(() => import('./pages/GuestQueueView').then(module => ({ default: module.default })));
const JoinQueue = lazy(() => import('./pages/JoinQueue').then(module => ({ default: module.default })));
const Login = lazy(() => import('./pages/Login').then(module => ({ default: module.default })));
const Profile = lazy(() => import('./pages/Profile').then(module => ({ default: module.default })));
const QueueView = lazy(() => import('./pages/QueueView').then(module => ({ default: module.default })));
const ResetPassword = lazy(() => import('./pages/ResetPassword').then(module => ({ default: module.default })));
const Setup = lazy(() => import('./pages/Setup').then(module => ({ default: module.default })));
const Signup = lazy(() => import('./pages/Signup').then(module => ({ default: module.default })));
const SignupConfirmation = lazy(() => import('./pages/SignupConfirmation').then(module => ({ default: module.default })));
const SpotifyCallback = lazy(() => import('./pages/SpotifyCallback').then(module => ({ default: module.default })));

// Create a wrapper component with ErrorBoundary for each route
const withErrorBoundary = (Component: React.ComponentType) => (
  <Suspense
    fallback={
      <div className="min-h-screen flex items-center justify-center bg-background text-foreground">
        <div className="text-center">
          <div className="w-12 h-12 border-t-2 border-purple-500 border-solid rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-muted-foreground">Loading...</p>
        </div>
      </div>
    }
  >
    <ErrorBoundary />
    <Component />
  </Suspense>
);

export const userRoutes: RouteObject[] = [
  { path: "/add-song", element: withErrorBoundary(AddSong) },
  { path: "/addsong", element: withErrorBoundary(AddSong) },
  { path: "/", element: withErrorBoundary(App) },
  { path: "/create-queue", element: withErrorBoundary(CreateQueue) },
  { path: "/createqueue", element: withErrorBoundary(CreateQueue) },
  { path: "/dashboard", element: withErrorBoundary(Dashboard) },
  { path: "/forgot-password", element: withErrorBoundary(ForgotPassword) },
  { path: "/forgotpassword", element: withErrorBoundary(ForgotPassword) },
  { path: "/guest-queue-view", element: withErrorBoundary(GuestQueueView) },
  { path: "/guestqueueview", element: withErrorBoundary(GuestQueueView) },
  { path: "/join-queue", element: withErrorBoundary(JoinQueue) },
  { path: "/joinqueue", element: withErrorBoundary(JoinQueue) },
  { path: "/login", element: withErrorBoundary(Login) },
  { path: "/profile", element: withErrorBoundary(Profile) },
  { path: "/queue-view", element: withErrorBoundary(QueueView) },
  { path: "/queueview", element: withErrorBoundary(QueueView) },
  { path: "/reset-password", element: withErrorBoundary(ResetPassword) },
  { path: "/resetpassword", element: withErrorBoundary(ResetPassword) },
  { path: "/setup", element: withErrorBoundary(Setup) },
  { path: "/signup", element: withErrorBoundary(Signup) },
  { path: "/signup-confirmation", element: withErrorBoundary(SignupConfirmation) },
  { path: "/signupconfirmation", element: withErrorBoundary(SignupConfirmation) },
  { path: "/spotify-callback", element: withErrorBoundary(SpotifyCallback) },
  { path: "/spotifycallback", element: withErrorBoundary(SpotifyCallback) },
];
